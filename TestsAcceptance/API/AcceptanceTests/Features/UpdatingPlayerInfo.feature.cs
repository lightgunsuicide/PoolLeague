//// ------------------------------------------------------------------------------
////  <auto-generated>
////      This code was generated by SpecFlow (http://www.specflow.org/).
////      SpecFlow Version:1.9.0.77
////      SpecFlow Generator Version:1.9.0.0
////      Runtime Version:4.0.30319.42000
//// 
////      Changes to this file may cause incorrect behavior and will be lost if
////      the code is regenerated.
////  </auto-generated>
//// ------------------------------------------------------------------------------
//#region Designer generated code
//#pragma warning disable
//namespace TestsAPI.AcceptanceTests.Features
//{
//    using TechTalk.SpecFlow;
    
    
//    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
//    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
//    [NUnit.Framework.TestFixtureAttribute()]
//    [NUnit.Framework.DescriptionAttribute("UpdatingPlayerInfo")]
//    public partial class UpdatingPlayerInfoFeature
//    {
        
//        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
//#line 1 "UpdatingPlayerInfo.feature"
//#line hidden
        
//        [NUnit.Framework.TestFixtureSetUpAttribute()]
//        public virtual void FeatureSetup()
//        {
//            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
//            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UpdatingPlayerInfo", "", ProgrammingLanguage.CSharp, ((string[])(null)));
//            testRunner.OnFeatureStart(featureInfo);
//        }
        
//        [NUnit.Framework.TestFixtureTearDownAttribute()]
//        public virtual void FeatureTearDown()
//        {
//            testRunner.OnFeatureEnd();
//            testRunner = null;
//        }
        
//        [NUnit.Framework.SetUpAttribute()]
//        public virtual void TestInitialize()
//        {
//        }
        
//        [NUnit.Framework.TearDownAttribute()]
//        public virtual void ScenarioTearDown()
//        {
//            testRunner.OnScenarioEnd();
//        }
        
//        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
//        {
//            testRunner.OnScenarioStart(scenarioInfo);
//        }
        
//        public virtual void ScenarioCleanup()
//        {
//            testRunner.CollectScenarioErrors();
//        }
        
//        [NUnit.Framework.TestAttribute()]
//        [NUnit.Framework.DescriptionAttribute("Adding a new player")]
//        [NUnit.Framework.CategoryAttribute("mytag")]
//        public virtual void AddingANewPlayer()
//        {
//            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a new player", new string[] {
//                        "mytag"});
//#line 6
//this.ScenarioSetup(scenarioInfo);
//#line 7
// testRunner.Given("I make a call to the API requesting to add a new player", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
//#line 8
// testRunner.And("I have entered a new username and password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
//#line 9
// testRunner.When("I make the request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
//#line 10
// testRunner.Then("the player is added to the league", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
//#line hidden
//            this.ScenarioCleanup();
//        }
        
//        [NUnit.Framework.TestAttribute()]
//        [NUnit.Framework.DescriptionAttribute("Adding a new game")]
//        public virtual void AddingANewGame()
//        {
//            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a new game", ((string[])(null)));
//#line 12
//this.ScenarioSetup(scenarioInfo);
//#line 13
// testRunner.Given("I make a call to the API with data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
//#line 14
// testRunner.When("I add details of a game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
//#line 15
// testRunner.Then("the winning player increments their win total by one", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
//#line 16
// testRunner.And("the losing player increments their losss total by one", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
//#line hidden
//            this.ScenarioCleanup();
//        }
//    }
//}
//#pragma warning restore
//#endregion
